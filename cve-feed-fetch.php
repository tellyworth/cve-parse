<?php

// Recursively traverse all json files in a given directory
function getJsonFiles($dir) {
	$files = array();
	foreach (scandir($dir) as $file) {
		if ($file[0] === '.') {
			continue;
		}
		$path = rtrim( $dir, '/' ) . '/' . $file;
		if (is_dir($path)) {
			$files = array_merge($files, getJsonFiles($path));
		} else {
			if (pathinfo($path, PATHINFO_EXTENSION) === 'json') {
				$files[] = $path;
			}
		}
	}
	return $files;
}

// If the CVE affects a wordpress plugin, return the plugin slug
function get_wordpress_plugin_slug( $json ) {
	if ( isset( $json['containers']['cna'] ) ) {
		if ( isset( $json['containers']['cna']['affected'] ) ) {
			$affected = $json['containers']['cna']['affected'];
			foreach ($affected as $a) {
				if ( isset( $a['collectionURL'] ) && str_starts_with( $a['collectionURL'], 'https://wordpress.org/plugins' ) ) {
					if ( isset( $a['packageName'] ) ) {
						return $a['packageName'];
					}
				}
			}
		}

		if ( isset( $json['containers']['cna']['references'] ) ) {
			$references = $json['containers']['cna']['references'];
			foreach ($references as $r) {
				if ( isset( $r['url'] ) && str_starts_with( $r['url'], 'https://wordpress.org/plugins/' ) ) {
					if ( preg_match( '#https://wordpress.org/plugins/([^/]+)#', $r['url'], $matches ) ) {
						return $matches[1];
					}
				}

				if ( isset( $r['url'] ) && str_starts_with( $r['url'], 'https://plugins.trac.wordpress.org/' ) ) {
					// WordFence: https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3078437%40pearl-header-builder&new=3078437%40pearl-header-builder&sfp_email=&sfph_mail=
					if ( preg_match( '/&old=\d+%40([-\w]+)/', $r['url'], $matches ) ) {
						return $matches[1];
					}
					// WordFence: https://plugins.trac.wordpress.org/browser/elfsight-pricing-table/trunk/core/includes/widgets-api.php#L71
					if ( preg_match( '#https://plugins.trac.wordpress.org/browser/([^/]+)/#', $r['url'], $matches ) ) {
						return $matches[1];
					}

					// WordFence: https://plugins.trac.wordpress.org/changeset/3116857/bookingpress-appointment-booking/trunk/core/classes/class.bookingpress.php
					if ( preg_match( '#https://plugins.trac.wordpress.org/changeset/\d+/([^/]+)/#', $r['url'], $matches ) ) {
						#var_dump( $matches );
						return $matches[1];
					}
					// WordFence: https://plugins.trac.wordpress.org/changeset/3096459/
					if ( preg_match( '#https://plugins.trac.wordpress.org/changeset/(\d+)#', $r['url'], $matches ) ) {
						#var_dump( $matches );
						if ( exec( 'svn log https://plugins.svn.wordpress.org/ -c ' . escapeshellarg($matches[1]) . ' --verbose', $output ) ) {
							#var_dump( $output );
							foreach ( $output as $line ) {
								if ( preg_match( '/^   [A-Z] \/([^\/]+)\//', $line, $matches ) ) {
									#var_dump( $matches );
									return $matches[1];
								}
							}
						}
					}
				}
			}
		}
	}

}

// Parse a CVE json file, and return the package name and affected version if the collectionURL matches
function parseJsonFile($file, $collectionURL) {
	$contents = file_get_contents($file);
	$json = json_decode($contents, true);

	if ( stripos( $contents, 'wordpress' ) !== false && ! get_wordpress_plugin_slug( $json ) && !stripos( $contents, 'themes' ) && !stripos( $contents, 'core.trac.wordpress.org')  ){
		#var_dump( "failed to find plugin name in file", $file );
		return [ [], $json ];
	}

	if ( !isset( $json['containers']['cna']['affected'] ) ) {
		#var_dump( $file, "none affected" );
		return [ [], $json ];
	}
	$affected = $json['containers']['cna']['affected'];
	$plugin_slug = get_wordpress_plugin_slug( $json );
	#var_dump( $file, $affected );
	$plugins_affected = array();
	foreach ($affected as $a) {
		// Some CVEs refer to multiple plugin names and versions (eg CVE-2023-47777)
		if ( $a['collectionURL'] === $collectionURL && isset( $a['packageName'] ) && !$plugin_slug ) {
			$plugin_slug = $a['packageName'];
		}
		if ( $plugin_slug ) {
			if ( !isset( $a['versions'] ) ) {
				#var_dump( $file, $a ); die;
			}
			foreach ( $a['versions'] as $v ) {
				#var_dump( $plugin_slug, $v );
				if ( 'affected' === $v['status'] ) {
					if ( !$plugin_slug ) {
						continue;
					}
					if ( isset( $v['lessThanOrEqual'] ) ) {
						$plugins_affected[ $plugin_slug ][ 'lte'] = $v['lessThanOrEqual'];
					}
					if ( isset( $v['lessThan'] ) ) {
						$plugins_affected[ $plugin_slug ][ 'lt'] = $v['lessThan'];
					}
					if ( isset( $v['greaterThanOrEqual'] ) ) {
						$plugins_affected[ $plugin_slug ][ 'gte'] = $v['greaterThanOrEqual'];
					}
					if ( isset( $v['greaterThan'] ) ) {
						$plugins_affected[ $plugin_slug ][ 'gt'] = $v['greaterThan'];
					}
					if ( isset( $v['version'] ) ) {
						// Redundant if we already have a lt/lte version
						#if ( !isset( $plugins_affected[ $plugin_slug ][ 'lt'] ) && !isset( $plugins_affected[ $plugin_slug ][ 'lte'] ) ) {

							if ( preg_match( '/^[*]\s*-\s*(\d+.*)/', $v['version'], $matches ) ) {
								// eg '*-2.2.85a' in CVE-2024-6346
								// or '* - 5.0.22.decaf' in CVE-2024-6883
								$plugins_affected[ $plugin_slug ][ 'lte'] = $matches[1];
								$plugins_affected[ $plugin_slug ][ 'gte'] = '0';
							} elseif ( preg_match( '/prior to (\d.*)/i', $v['version'], $matches ) ) {
								// eg CVE-2024-35297
								#var_dump( "prior to", $matches );
								$plugins_affected[ $plugin_slug ][ 'lt'] = $matches[1];
								if ( !isset( $plugins_affected[ $plugin_slug ][ 'gte'] ) && !isset( $plugins_affected[ $plugin_slug ][ 'gt'] ) ) {
									$plugins_affected[ $plugin_slug ][ 'gte'] = '0';
								}
							} elseif ( preg_match( '/^(\d.*) and earlier/', $v['version'], $matches ) ) {
								$plugins_affected[ $plugin_slug ][ 'lte'] = $matches[1];
								if ( !isset( $plugins_affected[ $plugin_slug ][ 'gte'] ) && !isset( $plugins_affected[ $plugin_slug ][ 'gt'] ) ) {
									$plugins_affected[ $plugin_slug ][ 'gte'] = '0';
								}
							} elseif ( preg_match( '/<=\s*(\d.*)/', $v['version'], $matches ) ) {
								$plugins_affected[ $plugin_slug ][ 'lte'] = $matches[1];
								if ( !isset( $plugins_affected[ $plugin_slug ][ 'gte'] ) && !isset( $plugins_affected[ $plugin_slug ][ 'gt'] ) ) {
									$plugins_affected[ $plugin_slug ][ 'gte'] = '0';
								}
							} elseif ( preg_match( '/versions (\d.*) to (\d.*)/', $v['version'], $matches ) ) {
								// 'versions 6.1.0 to 6.1.7'
								$plugins_affected[ $plugin_slug ][ 'lte'] = $matches[2];
								$plugins_affected[ $plugin_slug ][ 'gte'] = $matches[1];
							} elseif ( in_array( $v['version'], [ '*', 'all versions', 'n/a' ] ) ) {
								if ( !isset( $plugins_affected[ $plugin_slug ][ 'gte'] ) && !isset( $plugins_affected[ $plugin_slug ][ 'gt'] ) ) {
									$plugins_affected[ $plugin_slug ][ 'gte'] = '0';
								}
							} elseif ( preg_match( '/^(\d+\S*)/', $v['version'], $matches ) ) {
								#$plugins_affected[ $plugin_slug ][ 'lte'] = $matches[1];
								// This could be the earliest affected version, or the only affected version if no other version info is specified.
								if ( !isset( $plugins_affected[ $plugin_slug ][ 'gte'] ) && !isset( $plugins_affected[ $plugin_slug ][ 'gt'] ) ) {
									$plugins_affected[ $plugin_slug ][ 'gte'] = $matches[1];
								}
								if ( !isset( $plugins_affected[ $plugin_slug ][ 'lte'] ) && !isset( $plugins_affected[ $plugin_slug ][ 'lt'] ) ) {
									$plugins_affected[ $plugin_slug ][ 'lte'] = $matches[1];
								}
							}
						/*} else {
							$v_version = $v['version'];
							if ( in_array( $v['version'], [ '*', 'all versions', 'n/a' ] ) ) {
								$v_version = '0';
							}
								// It's probably a starting version. Let's put it in both lte and gte, and let those be overwritten if we find a more specific version.
							if ( !isset( $plugins_affected[ $plugin_slug ][ 'lte'] ) ) {
								$plugins_affected[ $plugin_slug ][ 'lte'] = $v_version;
							}
							if ( !isset( $plugins_affected[ $plugin_slug ][ 'gte'] ) ) {
								$plugins_affected[ $plugin_slug ][ 'gte'] = $v_version;
							}
						}*/
						#var_dump( $v, $plugins_affected[ $plugin_slug ] );
					}
					if ( empty( $plugins_affected[ $plugin_slug ]['gte'] ) && empty( $plugins_affected[ $plugin_slug ]['lte'] ) && empty( $plugins_affected[ $plugin_slug ]['gt'] ) && empty( $plugins_affected[ $plugin_slug ]['lt'] ) ) {
						#var_dump( $file, $a, $v ); die;
						var_dump( "no gte/lte", $plugin_slug, $v );
					}
				}
			}
		}
	}

	if ( stripos( $contents, 'wordpress' ) !== false && empty( $plugins_affected ) && !stripos( $contents, 'themes' ) && !stripos( $contents, 'core.trac.wordpress.org')  ){
		var_dump( "failed to find data in file", $plugin_slug, $file, $json );
		die;
	}
	return [ $plugins_affected , $json ];
}

function get_wordpress_plugin_info( $plugin_slug ) {
	// https://api.wordpress.org/plugins/info/1.2/?action=plugin_information&request[slug]=peepso-core&request[locale]=en_US&request[wp_version]=6.5
	#$url = 'https://api.wordpress.org/plugins/info/1.2/?action=plugin_information&request[slug]=' . urlencode( $plugin_slug );
	#$contents = file_get_contents( $url );
	#$json = json_decode( $contents, true );
	#return $json;

	$user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0';
	$api_ip = '198.143.164.251'; // FIXME: nslookup?

	$api_url = 'https://api.wordpress.org/plugins/info/1.2/?action=plugin_information&request[slug]=' . urlencode( $plugin_slug );

	// Initialize a cURL session
	$ch = curl_init($api_url);

	// Set cURL options
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);
	curl_setopt($ch, CURLOPT_RESOLVE, array(
		"api.wordpress.org:443:$api_ip",
	));

	// Execute the cURL request
	$response = curl_exec($ch);

	// Check for cURL errors
	if (curl_errno($ch)) {
		echo 'Error: ' . curl_error($ch);
		die;
	} else {
		// Close the cURL session
		curl_close($ch);

		// Parse the JSON response
		$data = json_decode($response, true);
		if (json_last_error() !== JSON_ERROR_NONE) {
			echo 'Error: ' . json_last_error_msg() . ' for ' . $plugin_slug . PHP_EOL;
			die;
		}

		if ( empty( $data ) ) {
			echo 'Empty response for ' . $plugin_slug . PHP_EOL;
		}

		if ( empty( $data['version'] ) ) {
			#var_dump( $plugin_slug, $data );
		}
		return $data;
	}

}

function check_version_against_cve( $version, $comparison, $cve_version ) {
    $ops = [
        'lt' => '<',
        'lte' => '<=',
        'gt' => '>',
        'gte' => '>=',
        'eq' => '=',
    ];

    // true = affected, false = unaffected
    return version_compare( $version, $cve_version, $ops[ $comparison ] );
}

function find_version_after_cve( $plugin_info, $comparison, $cve_version ) {
	#var_dump( $plugin_info, $comparison, $cve_version );
	if ( !isset( $plugin_info['versions'] ) ) {
		var_dump( "no versions", $plugin_info );
		return null;
	}
	$versions = array_keys( $plugin_info['versions'] );
	usort( $versions, function( $a, $b ) { return version_compare( $b, $a ); } );

	$last = null;
	foreach ( $versions as $version ) {
		if ( check_version_against_cve( $version, $comparison, $cve_version ) ) {
			#var_dump( $version, $comparison, $cve_version );
			return $last;
		}
		$last = $version;
	}
}

function find_version_prior( $version, $versions ) {
	unset( $versions['trunk'] );
	$versions = array_keys( $versions );
	usort( $versions, function( $a, $b ) { return version_compare( $b, $a ); } );
	#var_dump( $version, $versions );

	foreach ( $versions as $v ) {
		if ( version_compare( $v, $version, '<' ) ) {
			#var_dump( "found version prior", $v, $version );
			return $v;
		}
	}
	#var_dump( "no version prior", $version, $versions );
}

function find_version_after( $version, $versions ) {
	unset( $versions['trunk'] );
	$versions = array_keys( $versions );
	usort( $versions, function( $a, $b ) { return version_compare( $b, $a ); } );

	foreach ( $versions as $v ) {
		if ( version_compare( $v, $version, '>' ) ) {
			return $v;
		}
	}
}

function fetch_url_to_temp_file( $url ) {

	$tmp_file = tempnam( sys_get_temp_dir(), 'curl' );

	$ch = curl_init( $url );
	$fp = fopen( $tmp_file, 'w' );
	curl_setopt( $ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt( $ch, CURLOPT_FILE, $fp );
	curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, 1);
	curl_setopt( $ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0' );
	curl_exec( $ch );

	$http_code = curl_getinfo( $ch, CURLINFO_HTTP_CODE );
	if ( $http_code !== 200 ) {
		die( "Failed to fetch $url: $http_code\n" );
	}

	return $tmp_file;
}

function fetch_delta_feed( $delta_url = null ) {
	// Used to fetch the latest delta feed from the CVE project, for example:
	// https://github.com/CVEProject/cvelistV5/releases/download/cve_2024-09-10_0600Z/2024-09-10_delta_CVEs_at_0600Z.zip

	if ( !$delta_url ) {
		// Note that the feed is generally updated about 10-12 minutes after the hour. If we're too early we'll get a 404.
		// To work around this, use a time that's 15 minutes in the past.
		$timestamp = time() - 15*60;

		$utc_date = gmdate( 'Y-m-d', $timestamp );
		$utc_time = gmdate( 'H00', $timestamp ) . 'Z'; // top of the hour

		$delta_url = "https://github.com/CVEProject/cvelistV5/releases/download/cve_{$utc_date}_{$utc_time}/{$utc_date}_delta_CVEs_at_{$utc_time}.zip";
	}

	$tmp_file = fetch_url_to_temp_file( $delta_url );

	$zip = new ZipArchive();
	$r = $zip->open( $tmp_file, ZipArchive::RDONLY );
	if ( $r !== true ) {
		die( "Failed to open $tmp_file: $r\n" );
	}
	$new_tmp_dir = $tmp_file . '_dir';
	mkdir( $new_tmp_dir ) || die( "Failed to create $new_tmp_dir" );
	$zip->extractTo( $new_tmp_dir );
	$zip->close();

	return $new_tmp_dir;
}

$opts = getopt('d:f:a:cu:');

if ( isset( $opts['f'] ) ) {
	$from = $opts['f'];
} else {
	$from = null;
}

$only_assigner = $opts['a'] ?? null;
$csv = isset( $opts['c'] );
$delta_url = $opts['u'] ?? null;

//$files = getJsonFiles($opts['d']);
if ( isset( $opts['d'] ) ) {
	$files = getJsonFiles($opts['d']);
} elseif ( isset( $opts['u'] ) ) {
	$files = getJsonFiles( fetch_delta_feed( $delta_url ) );
} else {
	$files = getJsonFiles( fetch_delta_feed() );
}

$files_checked = 0;
$cves_found = 0;

foreach ( $files as $file ) {
	$contents = file_get_contents( $file );
	$files_checked++;
	if ( stripos( $contents, 'wordpress' ) === false ) {
		continue;
	}

	@list( $affected, $json ) = parseJsonFile($file, 'https://wordpress.org/plugins');

	if ( $only_assigner && strtolower($json['cveMetadata']['assignerShortName']) !== strtolower($only_assigner) ) {
		continue;
	}

	if ( stripos( json_encode( $json ), 'wordpress' ) !== false ) {
		#var_dump( $json['cveMetadata']['cveId'], $json['cveMetadata']['assignerShortName'], $json['containers']['cna']['title'], $affected );
		#var_dump( $json );
	}

	++$cves_found;
	#var_dump( $json['cveMetadata']['cveId'], $json['cveMetadata']['assignerShortName'] );
	if ( $csv ) {
		#if ( $affected ) {
			$publishedDate = $json['cveMetadata']['datePublished'];
			if ( $from ) {
				$from_date = new \DateTime( $from );
				$published_date = new \DateTime( $publishedDate );
				#var_dump( $from_date, $published_date );
				if ( $published_date < $from_date ) {
					continue;
				}
			}
			$cve_id = $json['cveMetadata']['cveId'];
			$assigner = $json['cveMetadata']['assignerShortName'];
			#var_dump( $assigner );
			#$path = implode( '/', array_slice( explode( '/', $file ), -3 ) );
			$cve_parts = explode( '-', $cve_id );
			$nnnn = intval( $cve_parts[2] / 1000 ) . 'xxx';
			$url = 'https://github.com/CVEProject/cvelistV5/blob/main/cves/' . $cve_parts[1] . '/' . $nnnn . '/' . $cve_id . '.json';
			$severity = $json['containers']['cna']['metrics'][0]['cvssV3_1']['baseSeverity'] ?? null;
			$score = $json['containers']['cna']['metrics'][0]['cvssV3_1']['baseScore'] ?? null;
			foreach ( $affected as $package => $versions ) {
				$min_ver = $versions['gte'] ?? null;
				$max_ver = $versions['lte'] ?? null;
				if ( is_null( $min_ver ) && isset( $versions['gt'] ) ) {
					$min_ver = find_version_after( $versions['gt'], get_wordpress_plugin_info( $package )['versions'] ?? [] );
				}
				if ( is_null( $max_ver ) && isset( $versions['lt'] ) ) {
					$max_ver = find_version_prior( $versions['lt'], get_wordpress_plugin_info( $package )['versions'] ?? [] ) ?? $versions['lt'] . '*';
					#var_dump( "found max ver", $max_ver );
					#var_dump( get_wordpress_plugin_info( $package ) );
				}
				if ( is_null($min_ver) && is_null($max_ver) ) {
					#var_dump( $file, $package, $versions );
					if ( $r = get_wordpress_plugin_info( $package ) ) {
						if ( isset( $r['error'] ) ) {
							var_dump( $r );
						}
					}
					$max_ver = 'FIXME'; // need to handle it manually
				}
				#foreach ( $versions as $comparison => $version ) {
					fputcsv( STDOUT, [ $cve_id, $publishedDate, $package, $min_ver, $max_ver, $severity, $score, $url ] );
				#}
			}
		#}
	} else {
		echo substr( $json['cveMetadata']['datePublished'], 0, 10 ) . ' ' . $json['cveMetadata']['assignerShortName'] . ' ' . $json['cveMetadata']['cveId'] . "\n";
		$path = implode( '/', array_slice( explode( '/', $file ), -3 ) );
		$url = 'https://github.com/CVEProject/cvelistV5/blob/main/cves/' . $path;
		echo $url . "\n";
		echo ($json['containers']['cna']['title'] ?? $json['containers']['cna']['descriptions'][0]['value'] ). "\n";
		if ( isset( $json['containers']['cna']['metrics'][0]['cvssV3_1'] ) ) {
			echo $json['containers']['cna']['metrics'][0]['cvssV3_1']['baseSeverity'] . "\n";
			$vectorString = $json['containers']['cna']['metrics'][0]['cvssV3_1']['vectorString'];
			if ( stripos( $vectorString, 'PR:N' ) !== false ) {
				echo 'NO PRIVS!' . "\n";
			}
			if ( stripos( $vectorString, 'AC:L' ) !== false ) {
				echo 'LOW COMPLEXITY!' . "\n";
			}
			if ( stripos( $vectorString, 'UI:N' ) !== false ) {
				echo 'NO USER INTERACTION!' . "\n";
			}
		}
		if ( $affected ) {
			foreach ( $affected as $package => $versions ) {
				foreach ( $versions as $comparison => $version ) {
					echo "\t" . $package . ' ' . $comparison . ' ' . $version . "\n";
					if ( $plugin_info = get_wordpress_plugin_info( $package ) ) {
						if ( isset( $plugin_info['error'] ) ) {
							echo "\t\t" . 'Plugin is closed (' . $plugin_info['error'] . ")\n";
							continue;
						}
						#var_dump( array_keys( $plugin_info ) );
						if ( isset( $plugin_info['active_installs'] ) ) {
							echo "\t\t" . number_format( $plugin_info['active_installs'] ) . ' active installs' . "\n";
						}
						$fixed = find_version_after_cve( $plugin_info, $comparison, $version );
						if ( $fixed ) {
							echo "\t\t" . 'Fixed in ' . $fixed . "\n";
						} else {
							echo "\t\t" . 'No fix! Latest is ' . $plugin_info['version'] . "\n";
						}
						if ( !isset( $plugin_info['versions'][ $plugin_info['version'] ] ) ) {
							echo "\t\t" . 'Latest version not in versions array (released from trunk?)' . "\n";
							#var_dump( $plugin_info['versions'], $plugin_info['version'] );
						}
					}
				}
			}
		} else {
			echo "Unknown plugin slug\n";
		}
		echo "\n\n";

	}

}

fputs( STDERR, "Checked $files_checked files, found $cves_found CVEs\n" );
