<?php

// Recursively traverse all json files in a given directory
function getJsonFiles($dir) {
	$files = array();
	foreach (scandir($dir) as $file) {
		if ($file[0] === '.') {
			continue;
		}
		$path = rtrim( $dir, '/' ) . '/' . $file;
		if (is_dir($path)) {
			$files = array_merge($files, getJsonFiles($path));
		} else {
			if (pathinfo($path, PATHINFO_EXTENSION) === 'json') {
				$files[] = $path;
			}
		}
	}
	return $files;
}

// If the CVE affects a wordpress plugin, return the plugin slug
function get_wordpress_plugin_slug( $json ) {
	#if ( isset( $json['containers']['cna'] ) ) {
		if ( isset( $json[['affected'] ) ) {
			$affected = $json['affected'];
			foreach ($affected as $a) {
				if ( isset( $a['collectionURL'] ) && str_starts_with( $a['collectionURL'], 'https://wordpress.org/plugins' ) ) {
					if ( isset( $a['packageName'] ) ) {
						return $a['packageName'];
					}
				}
			}
		}

		if ( isset( $json['references'] ) ) {
			$references = $json['references'];
			foreach ($references as $r) {
				if ( isset( $r['url'] ) && str_starts_with( $r['url'], 'https://wordpress.org/plugins/' ) ) {
					if ( preg_match( '#https://wordpress.org/plugins/([^/]+)#', $r['url'], $matches ) ) {
						return $matches[1];
					}
				}

				if ( isset( $r['url'] ) && str_starts_with( $r['url'], 'https://plugins.trac.wordpress.org/' ) ) {
					// WordFence: https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3078437%40pearl-header-builder&new=3078437%40pearl-header-builder&sfp_email=&sfph_mail=
					if ( preg_match( '/&old=\d+%40([-\w]+)/', $r['url'], $matches ) ) {
						return $matches[1];
					}
					// WordFence: https://plugins.trac.wordpress.org/browser/elfsight-pricing-table/trunk/core/includes/widgets-api.php#L71
					if ( preg_match( '#https://plugins.trac.wordpress.org/browser/([^/]+)/#', $r['url'], $matches ) ) {
						return $matches[1];
					}

					// WordFence: https://plugins.trac.wordpress.org/changeset/3116857/bookingpress-appointment-booking/trunk/core/classes/class.bookingpress.php
					if ( preg_match( '#https://plugins.trac.wordpress.org/changeset/\d+/([^/]+)/#', $r['url'], $matches ) ) {
						#var_dump( $matches );
						return $matches[1];
					}
					// WordFence: https://plugins.trac.wordpress.org/changeset/3096459/
					if ( preg_match( '#https://plugins.trac.wordpress.org/changeset/(\d+)#', $r['url'], $matches ) ) {
						#var_dump( $matches );
						if ( exec( 'svn log https://plugins.svn.wordpress.org/ -c ' . escapeshellarg($matches[1]) . ' --verbose', $output ) ) {
							foreach ( $output as $line ) {
								if ( preg_match( '/^   [A-Z] \/([^\/]+)\//', $line, $matches ) ) {
									#var_dump( $matches );
									return $matches[1];
								}
							}
						}
					}
				}
			}
		}
	#}

}

// Parse a CVE json file, and return the package name and affected version if the collectionURL matches
function parseJsonFile($file, $collectionURL) {
	$contents = file_get_contents($file);
	$json = json_decode($contents, true);

	if ( stripos( $contents, 'wordpress' ) !== false && ! get_wordpress_plugin_slug( $json ) && !stripos( $contents, 'themes' ) && !stripos( $contents, 'core.trac.wordpress.org')  ){
		var_dump( "failed to find plugin name in file", $file );
		return [ [], $json ];
	}

	if ( !isset( $json['containers']['cna']['affected'] ) ) {
		#var_dump( $file, "none affected" );
		return [ [], $json ];
	}
	$affected = $json['containers']['cna']['affected'];
	$plugin_slug = get_wordpress_plugin_slug( $json );
	#var_dump( $file, $affected );
	$plugins_affected = array();
	foreach ($affected as $a) {
		// Some CVEs refer to multiple plugin names and versions (eg CVE-2023-47777)
		if ( $a['collectionURL'] === $collectionURL && isset( $a['packageName'] ) ) {
			$plugin_slug = $a['packageName'];
		}
		if ( $plugin_slug ) {
			if ( !isset( $a['versions'] ) ) {
				#var_dump( $file, $a ); die;
			}
			foreach ( $a['versions'] as $v ) {
				if ( 'affected' === $v['status'] ) {
					if ( !$plugin_slug ) {
						continue;
					}
					if ( isset( $v['lessThanOrEqual'] ) ) {
						$plugins_affected[ $plugin_slug ][ 'lte'] = $v['lessThanOrEqual'];
					}
					if ( isset( $v['lessThan'] ) ) {
						$plugins_affected[ $plugin_slug ][ 'lt'] = $v['lessThan'];
					}
					if ( isset( $v['greaterThanOrEqual'] ) ) {
						$plugins_affected[ $plugin_slug ][ 'gte'] = $v['greaterThanOrEqual'];
					}
					if ( isset( $v['greaterThan'] ) ) {
						$plugins_affected[ $plugin_slug ][ 'gt'] = $v['greaterThan'];
					}
					if ( isset( $v['version'] ) ) {
						// Redundant if we already have a lt/lte version
						if ( !isset( $plugins_affected[ $plugin_slug ][ 'lt'] ) && !isset( $plugins_affected[ $plugin_slug ][ 'lte'] ) ) {
							if ( preg_match( '/\d+/', $v['version'] ) ) {
								$plugins_affected[ $plugin_slug ][ 'eq'] = $v['version'];
							} elseif ( in_array( $v['version'], [ '*', 'all versions', 'n/a' ] ) ) {
									$plugins_affected[ $plugin_slug ][ 'gte'] = '0';
							}
						}
					}
					if ( empty( $plugins_affected[ $plugin_slug ] ) ) {
						#var_dump( $file, $a, $v ); die;
					}
				}
			}
		}
	}

	if ( stripos( $contents, 'wordpress' ) !== false && empty( $plugins_affected ) && !stripos( $contents, 'themes' ) && !stripos( $contents, 'core.trac.wordpress.org')  ){
		var_dump( "failed to find data in file", $file, $json ); die;
	}
	return [ $plugins_affected, $json ];
}

/*
$opts = getopt('d:f:');
if (!isset($opts['d'])) {
	var_dump( parseJsonFile( '/Users/alex/Downloads/cves/2024/5xxx/CVE-2024-5192.json', 'https://wordpress.org/plugins' ) );
	die('Usage: php cve-parse.php -d <directory>' . PHP_EOL);
}
*/

if ( isset( $opts['f'] ) ) {
	$from = $opts['f'];
} else {
	$from = null;
}
/*
$files = getJsonFiles($opts['d']);
foreach ( $files as $file ) {
	$contents = file_get_contents( $file );
	if ( stripos( $contents, 'wordpress' ) === false ) {
		continue;
	}

	@list( $affected, $json ) = parseJsonFile($file, 'https://wordpress.org/plugins');
	if ( stripos( json_encode( $json ), 'wordpress' ) !== false && 'Wordfence' !== $json['cveMetadata']['assignerShortName'] ) {
		var_dump( $json['cveMetadata']['cveId'], $json['cveMetadata']['assignerShortName'], $affected );
	}

	var_dump( $json['cveMetadata']['cveId'], $json['cveMetadata']['assignerShortName'] );
	if ( $affected ) {
		$publishedDate = $json['cveMetadata']['datePublished'];
		$cve_id = $json['cveMetadata']['cveId'];
		$assigner = $json['cveMetadata']['assignerShortName'];
		#var_dump( $assigner );
		$path = implode( '/', array_slice( explode( '/', $file ), -3 ) );
		$url = 'https://github.com/CVEProject/cvelistV5/blob/main/cves/' . $path;
		foreach ( $affected as $package => $versions ) {
			foreach ( $versions as $comparison => $version ) {
				if ( $from ) {
					$from_date = new \DateTime( $from );
					$published_date = new \DateTime( $publishedDate );
					#var_dump( $from_date, $published_date );
					if ( $published_date < $from_date ) {
						continue;
					}
				}
				fputcsv( STDOUT, [ $cve_id, $publishedDate, $package, $comparison, $version, $url ] );
			}
		}
	}
}
*/

function find_in_array_recursive( $needle, $haystack ) {
	foreach ( $haystack as $key => $value ) {
		if ( is_string( $value ) && stripos( $value, $needle ) !== false ) {
			return $value;
		}
		if ( is_array( $value ) ) {
			$result = find_in_array_recursive( $needle, $value );
			if ( $result ) {
				return $result;
			}
		}
	}
}

$fp = gzopen( 'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz', 'r' );
$contents = '';
while ( !feof( $fp ) ) {
	$line = gzgets( $fp );
	$contents .= $line;
}
fclose( $fp );

$json = json_decode( $contents, true );
foreach ( $json['CVE_Items'] as $item ) {
	$cve_id = $item['cve']['CVE_data_meta']['ID'];
	$publishedDate = $item['publishedDate'];
	$assigner = $item['cve']['CVE_data_meta']['ASSIGNER'];
	if ( find_in_array_recursive( 'wordpress', $item ) ) {
		var_dump( $cve_id, $assigner );
	}
	$plugin_slug = get_wordpress_plugin_slug( $item );
	if ( $plugin_slug ) {
		var_dump( $cve_id, $plugin_slug );
	}
}